{"ast":null,"code":"import { ethers, Contract } from 'ethers';\nimport Wallet from './contracts/Wallet.json';\nimport addresses from './addresses.js';\n\nconst getBlockchain = () => new Promise((resolve, reject) => {\n  window.addEventListener('load', async () => {\n    if (window.ethereum) {\n      await window.ethereum.enable();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const signerAddress = await signer.getAddress();\n      const wallet = new Contract(Wallet.networks[window.ethereum.networkVersion].address, Wallet.abi, signer);\n      const dai = new Contract(addresses.dai, ['function approve(address spender, uint amount) external'], signer);\n      resolve({\n        signerAddress,\n        wallet,\n        dai\n      });\n    }\n\n    resolve({\n      signerAddress: undefined,\n      wallet: undefined,\n      dai: undefined\n    });\n  });\n});\n\nexport default getBlockchain;","map":{"version":3,"sources":["/Users/benzo/defi-development-mastery/project-defi-wallet/frontend/src/ethereum.js"],"names":["ethers","Contract","Wallet","addresses","getBlockchain","Promise","resolve","reject","window","addEventListener","ethereum","enable","provider","providers","Web3Provider","signer","getSigner","signerAddress","getAddress","wallet","networks","networkVersion","address","abi","dai","undefined"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,QAAjC;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,SAAP,MAAsB,gBAAtB;;AAEA,MAAMC,aAAa,GAAG,MACpB,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/BC,EAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AAC1C,QAAGD,MAAM,CAACE,QAAV,EAAoB;AAClB,YAAMF,MAAM,CAACE,QAAP,CAAgBC,MAAhB,EAAN;AACA,YAAMC,QAAQ,GAAG,IAAIZ,MAAM,CAACa,SAAP,CAAiBC,YAArB,CAAkCN,MAAM,CAACE,QAAzC,CAAjB;AACA,YAAMK,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,YAAMC,aAAa,GAAG,MAAMF,MAAM,CAACG,UAAP,EAA5B;AAEA,YAAMC,MAAM,GAAG,IAAIlB,QAAJ,CACbC,MAAM,CAACkB,QAAP,CAAgBZ,MAAM,CAACE,QAAP,CAAgBW,cAAhC,EAAgDC,OADnC,EAEbpB,MAAM,CAACqB,GAFM,EAGbR,MAHa,CAAf;AAMA,YAAMS,GAAG,GAAG,IAAIvB,QAAJ,CACVE,SAAS,CAACqB,GADA,EAEV,CAAC,yDAAD,CAFU,EAGVT,MAHU,CAAZ;AAMAT,MAAAA,OAAO,CAAC;AAACW,QAAAA,aAAD;AAAgBE,QAAAA,MAAhB;AAAwBK,QAAAA;AAAxB,OAAD,CAAP;AACD;;AACDlB,IAAAA,OAAO,CAAC;AAACW,MAAAA,aAAa,EAAEQ,SAAhB;AAA2BN,MAAAA,MAAM,EAAEM,SAAnC;AAA8CD,MAAAA,GAAG,EAAEC;AAAnD,KAAD,CAAP;AACD,GAtBD;AAuBD,CAxBD,CADF;;AA2BA,eAAerB,aAAf","sourcesContent":["import { ethers, Contract } from 'ethers';\nimport Wallet from './contracts/Wallet.json';\nimport addresses from './addresses.js';\n\nconst getBlockchain = () =>\n  new Promise((resolve, reject) => {\n    window.addEventListener('load', async () => {\n      if(window.ethereum) {\n        await window.ethereum.enable();\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const signerAddress = await signer.getAddress();\n\n        const wallet = new Contract(\n          Wallet.networks[window.ethereum.networkVersion].address,\n          Wallet.abi,\n          signer\n        );\n\n        const dai = new Contract(\n          addresses.dai,\n          ['function approve(address spender, uint amount) external'],\n          signer\n        );\n\n        resolve({signerAddress, wallet, dai});\n      }\n      resolve({signerAddress: undefined, wallet: undefined, dai: undefined});\n    });\n  });\n\nexport default getBlockchain;\n"]},"metadata":{},"sourceType":"module"}